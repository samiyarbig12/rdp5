name: Deploy Windows Server 2025 on Alibaba Cloud ECS

on:
  workflow_dispatch:

env:
  VM_NAME: rdp-windows-server-2022-vm   # اسم instance (تو خواستی این اسم بمونه)
  VM_REGION: us-east-1-wl1-nyc1         # Alibaba region (US East - New York)
  VM_ZONE: us-east-1-wl1-nyc1a          # Zone (NYC AZ)
  VM_IMAGE: win_2025_datacenter_x64_en  # image alias (Windows Server 2025)
  VM_INSTANCE_TYPE: ecs.g6.12xlarge     # مثال: 48 vCPU / 64 GB (در صورت نیاز تغییر بده)
  TERMINATE_AFTER: 180                  # دقیقه قبل از حذف خودکار (قابل تغییر)

permissions:
  contents: read

jobs:
  create-windows-vm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Alibaba Cloud CLI
        run: |
          curl -sS https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz | tar -xz
          sudo mv aliyun /usr/local/bin/aliyun
          aliyun version || true

      - name: Configure Alibaba Cloud CLI
        env:
          ALICLOUD_ACCESS_KEY_ID: ${{ secrets.ALIBABA_ACCESS_KEY_ID }}
          ALICLOUD_ACCESS_KEY_SECRET: ${{ secrets.ALIBABA_ACCESS_KEY_SECRET }}
        run: |
          aliyun configure set --mode AK --access-key-id "${ALICLOUD_ACCESS_KEY_ID}" \
            --access-key-secret "${ALICLOUD_ACCESS_KEY_SECRET}" --region "${{ env.VM_REGION }}"

      - name: (Optional) Resolve exact ImageId if alias not supported
        id: find-image
        run: |
          # اگر خطا گرفت که ImageId نامعتبر است، از این دستور برای یافتن image id واقعی استفاده کن
          echo "Listing Windows images matching 'win_2025' in region ${VM_REGION}..."
          aliyun ecs DescribeImages --RegionId "${VM_REGION}" --ImageName "win_2025*" --Output JSON > images.json || true
          jq -r '.Images.Image[] | {ImageId: .ImageId, ImageName: .ImageName} | @json' images.json > image-list.json || true
          echo "Saved images to image-list.json"
          cat image-list.json || true
          # اگر لازم شد، می‌تونی اینجا مقدار REAL_IMAGE_ID را از images.json استخراج کنی و به متغیر زیر بنویسی.
          # export REAL_IMAGE_ID=... && echo "REAL_IMAGE_ID=$REAL_IMAGE_ID" >> $GITHUB_ENV

      - name: Create Windows ECS Instance (passwordless using KeyPair)
        id: create_vm
        env:
          SECURITY_GROUP_ID: ${{ secrets.ALIBABA_SECURITY_GROUP_ID }}
          KEY_PAIR_NAME: ${{ secrets.ALIBABA_KEY_PAIR_NAME }}
        run: |
          echo "Creating Windows Server 2025 instance in ${VM_REGION} / ${VM_ZONE} ..."
          INSTANCE_JSON=$(aliyun ecs CreateInstance \
            --RegionId "${VM_REGION}" \
            --ZoneId "${VM_ZONE}" \
            --InstanceName "${VM_NAME}" \
            --ImageId "${VM_IMAGE}" \
            --InstanceType "${VM_INSTANCE_TYPE}" \
            --SecurityGroupId "${SECURITY_GROUP_ID}" \
            --KeyPairName "${KEY_PAIR_NAME}" \
            --InternetMaxBandwidthOut 10 \
            --IoOptimized true \
            --InstanceChargeType PostPaid \
            --Amount 1 \
            --Output JSON) || (echo "CreateInstance failed:" && echo "$INSTANCE_JSON" && exit 1)
          
          # save full JSON for inspection
          echo "$INSTANCE_JSON" > instance.json
          echo "Saved instance.json"

          # extract InstanceId (path depends on CLI output)
          INSTANCE_ID=$(echo "$INSTANCE_JSON" | jq -r '.InstanceId // .InstanceIdList[0] // .InstanceIds[0] // empty')
          if [ -z "$INSTANCE_ID" ]; then
            # try parsing nested structure
            INSTANCE_ID=$(cat instance.json | jq -r '.InstanceId // .InstanceIds | if type=="array" then .[0] else .InstanceId end' 2>/dev/null || true)
          fi
          if [ -z "$INSTANCE_ID" ]; then
            echo "ERROR: Could not extract InstanceId from CreateInstance output."
            cat instance.json
            exit 1
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Instance created: $INSTANCE_ID"

      - name: Wait for instance to be Running and get Public IP
        run: |
          echo "Waiting for instance to be Running..."
          # poll DescribeInstances until status is Running
          STATUS=""
          until [ "$STATUS" = "Running" ]; do
            sleep 8
            STATUS=$(aliyun ecs DescribeInstances --InstanceIds "[\"${{ env.INSTANCE_ID }}\"]" --Output JSON | jq -r '.Instances.Instance[0].Status' || echo "")
            echo "Status: $STATUS"
          done
          # get public IP
          PUBLIC_IP=$(aliyun ecs DescribeInstances --InstanceIds "[\"${{ env.INSTANCE_ID }}\"]" --Output JSON | jq -r '.Instances.Instance[0].PublicIpAddress.IpAddress[0]')
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "Instance is running at IP: $PUBLIC_IP"

      - name: Show RDP connection info
        run: |
          echo "────────────────────────────"
          echo "Windows Server 2025 VM is ready!"
          echo "Instance ID: $INSTANCE_ID"
          echo "Public IP: $PUBLIC_IP"
          echo "RDP: mstsc /v:$PUBLIC_IP"
          echo "Login user: Administrator"
          echo "Authentication: KeyPair '${{ secrets.ALIBABA_KEY_PAIR_NAME }}' (no password configured)"
          echo "────────────────────────────"

      - name: Schedule termination after timeout
        run: |
          echo "Sleeping for $TERMINATE_AFTER minutes before termination..."
          sleep $((TERMINATE_AFTER * 60))
          echo "Deleting instance $INSTANCE_ID ..."
          aliyun ecs DeleteInstance --InstanceId "$INSTANCE_ID" --Force true
          echo "Instance deleted ✅"
